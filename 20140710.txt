经验总结：
1.	布局管理中layout_height设置为0dp同时配合layout_weight使用可以实现下面界面固定，上面界面自由宽展。


2.	State List 设置按钮按下和正常状态时显示什么背景，使用Selector标签实现。默认背景的item要放在最后。


3.	ListView有一个cacheColorHint属性，该属性是按住listview时的缓存色，默认为黑色，有时为了美观可以将它设置为透明（#00000000）。


4.	ListView的数据初始化时，一般要写到一个方法中，该方法的业务是：得到最新数据并添加到ListView-―得到适配器并通知更新。


5.	GitHub使用场景：

1）	本地还没有仓库，GitHub仓库已经存在，要从GitHub上将仓库克隆到本地。
$ git clone git@github.com:mutougege/gittest.git

2）	本地已经存在仓库，GitHub仓库有更新，本地和远程库已建立关联，要从GitHub上将仓库克更新到本地。
$ git pull origin master

3）	本地仓库有更新，GitHub仓库已存在，本地和远程库已建立关联，要将本地仓库提交到GitHub。
$ git push origin master

4）	本地仓库有更新，GitHub仓库已存在，本地和远程库已建立关联，要将本地仓库提交到GitHub。

5）	本地仓库已存在，GitHub上有一个同名空仓库，要将本地仓库与GitHub仓库建立关联，然后把本地仓库的内容提交到远程GutHub仓库。
$ git remote add origin git@github.com:mutougege/gittest.git
$ git push -u origin master


6. 为什么Git提交要经过git add和git commit两步才能完成。
    Git用blob对象来存储文件内容，用tree对象存储目录里的文件名，用commit对象存储每一次提交。根据这个问题，git add负责将文件内容存入blob对象，并更新index，git commit负责根据index生成tree对象，然后生成commit对象指向这个tree对象。
	Git比其他同类软件多出个暂存区域的概念，git add不是将文件置于版本控制之下，而是将文件添加到暂存区域（index）。所有新增的和修改过的文件都要执行git add命令添加后才能commit。commit时是不理会工作区的文件的，而是根据index为每个目录生成tree对象，然后再创建commit对象指向它。 
	这样做的好处是你可以通过git add -i命令随意修改要加入暂存区域的文件。比如你一次修改了3个文件，要分成3个commit提交，那么每次添加一个文件到暂存区域然后commit就可以了。又或者，刚修改错了一个文件，可以从暂存区域里取出上次git add后的版本。 
