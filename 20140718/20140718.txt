1. 观察者模式：
1）定义
        观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。

2）解决的问题
　　将一个系统分割成一些类相互协作的形式有一个不好的副作用，那就是需要维护相关对象间的一致性。我们不希望为了维持一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便。观察者就是解决这类的耦合关系的。

3）模式中的角色

　　3.1 抽象主题（Subject）：它把所有观察者对象的引用保存到一个聚集里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。

　　3.2 具体主题（ConcreteSubject）：将有关状态存入具体观察者对象；在具体主题内部状态改变时，向所有登记过的观察者发出通知。

　　3.3 抽象观察者（Observer）：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己。

　　3.4 具体观察者（ConcreteObserver）：实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。


2. ImageSwitcher+Gallery 适合做壁纸设置或者图片浏览

	Gallery使用步骤：在xml中加入Gallery组件，在程序中加载；创建Gallery的Adapter（继承BaseAdapter），主要需要实现的方法是public View getView(int position, View convertView, ViewGroup parent) {}，该方法一般的操作是创建一个ImageView然后设置各个参数，以及ImageView的图片，然后然返回ImageView；设置Gallery的Adapter；使用setOnItemSelectedListener(new OnItemSelectedListener() {}设置滑动时的选中操作。
	
	ImageSwitcher使用步骤：在xml中加入ImageSwitcher组件，在程序中加载；关键一个ViewFactory，主要实现public View makeView() {}方法，该方法也是返回一个ImageView和Gallery的Adapter类中的getView()非常类似；ImageSwitcher可以使用setImageResource（drawableId）设置图片资源，drawableId是资源ID。
	
	动态获得图片资源ID的方法是：
	int drawableId = R.drawable.class.getDeclaredField("imageName").getInt(this);
	
3. java监听器使用的是监听器模式，监听器模式其实是观察者模式的一种。

4. 一个Activity中放入两个Fragment，两个Fragment要通信可以使用观察者模式-如图Listener.vsd
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	